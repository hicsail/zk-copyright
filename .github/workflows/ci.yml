name: Build & Deploy

on:
  workflow_dispatch:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  format-and-test:
    name: Format and Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up PyPy3
        uses: actions/setup-python@v3
        with:
          python-version: 'pypy-3.10'
      - name: Install dependencies
        run: |
          pypy3 -m ensurepip
          pypy3 -m pip install --upgrade pip
          pypy3 -m pip install -r requirements.txt
      - name: Check Formatting with Black
        run: |
          black --check .
      - name: Clone and install picozk
        run: |
          git clone https://github.com/uvm-plaid/picozk.git
          cd picozk
          pypy3 -m pip install .
      - name: Make irs directory
        run: mkdir irs
      - name: Run madlibs
        run: pypy3 copyright_madlibs.py
      - name: Run phonebook
        run: pypy3 copyright_phonebook.py
  
  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    steps:     
      - uses: docker/setup-qemu-action@v2
      - uses: docker/setup-buildx-action@v2
      - uses: actions/checkout@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME_REPO }}
          password: ${{ secrets.DOCKERHUB_TOKEN_REPO }}
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            hicsail/zk-copyright
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}
            type=semver,pattern={{major}}.{{minor}}
      - name: Build & Push Docker Build
        uses: docker/build-push-action@v4
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha,scope=build
          cache-to: type=gha,mode=max,scope=build